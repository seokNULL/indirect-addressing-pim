        case DMA_START:  /* Notify DMA start */
        {   
            #ifdef PERF_TIME
            dma_init_time    = 0;    
            desc_copy_time   = 0;     
            tx_time          = 0;
            PERF_START(start_dma_init);
            #endif

            /* Wait for DMA idle until loop count reaches zero or timeout */
            err = readl_poll_timeout((void *)(cdma_dev->dma_ctl_reg) + CDMA_REG_SR, val, (val & CDMA_REG_SR_IDLE), 0, CDMA_MAX_POLLING);
            if (err) {
                printk(KERN_ERR " PL_DMA] DMA in used \n");
                return -EIOCTL;
            }
            #ifdef PERF_TIME
            PERF_END(start_dma_init, end_dma_init, dma_init_time);
            #endif


            #ifdef PERF_TIME
            PERF_START(start_desc_copy);
            #endif

            /* 
             * Copy PISA-DMA instructions from system memory to descriptor memory 
             * pisa structure size is 64B (= descriptor granularity)
             */
            if (copy_from_user((void *)cdma_dev->desc_pim, (void *__user)pim_args.desc_host, (pim_args.desc_idx + 1) * 0x40)) {
                printk(KERN_ERR " PL_DMA] ERROR copy_from_user descriptor");
                return -EIOCTL;
            }
            #ifdef PERF_TIME
            PERF_END(start_desc_copy, end_desc_copy, desc_copy_time);
            #endif

            #ifdef PERF_TIME
            PERF_START(start_dma_tx);
            #endif

            clr_signal[0] = 0;
            pim_signal[0] = 0;
            /* Start DMA transaction */
            // printk("desc_idx: %d\n",  pim_args.desc_idx, );
            // printk("desc_last: %llx\n", pim_args.desc_last);

            if (dma_sg_tx(pim_args.desc_idx, pim_args.desc_last) < 0) {
                printk(KERN_ERR " PL_DMA] Error transactions");
                return -EDMA_TX;
            }
            clr_signal[0] = 0;
            pim_signal[0] = 0;
            
            #ifdef PERF_TIME
            PERF_END(start_dma_tx, end_dma_tx, tx_time);
            printk("PROF] DMA WAIT: %llu ns\n", (long long unsigned int) dma_init_time);            
            printk("PROF] DESC COPY: %llu ns\n", (long long unsigned int) desc_copy_time);            
            printk("PROF] DMA TX: %llu ns\n", (long long unsigned int) tx_time);            
            #endif

            break;   